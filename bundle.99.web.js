"use strict";(self.webpackChunk_mmomtchev_react_native_settings=self.webpackChunk_mmomtchev_react_native_settings||[]).push([[99],{99:(n,e,t)=>{t.r(e),t.d(e,{default:()=>i});const i="import React from 'react';\nimport {Dimensions, StyleSheet, View, Image, Text} from 'react-native';\nimport {NavigationContainer} from '@react-navigation/native';\n\nimport wings from '../wings.svg';\nimport {default as ReactNativeSettings, SettingsElement} from '@mmomtchev/react-native-settings';\n\nconst configData: Record<string, string> = {};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        maxHeight: Dimensions.get('window').height,\n        backgroundColor: '#fff',\n        justifyContent: 'center',\n        padding: '1.5%'\n    }\n});\n\n// Retrieve a conf item or return the default\nconst confGet = (key: string, def: string): string => configData[key] || def;\n\n// Store a conf item\nconst confSet = (key: string, value: string): void => {\n    configData[key] = value;\n};\n\nconst intelligence: Record<string, string> = {L: 'Low', M: 'Medium', H: 'High'};\n\n// This is the configuration schema\nconst settings: SettingsElement[] = [\n    {\n        label: 'Name',\n        type: 'string',\n        display: (s) => (s && s.length ? s : 'not set'),\n        get: confGet.bind(null, '@name', ''),\n        set: confSet.bind(null, '@name')\n    },\n    {\n        label: 'Intelligence',\n        title: 'Select Intelligence',\n        type: 'enum',\n        values: Object.keys(intelligence),\n        display: (v: string) => intelligence[v],\n        get: confGet.bind(null, '@int', 'M'),\n        set: confSet.bind(null, '@int')\n    },\n    {\n        // You can pass your own JSX element to be used as label\n        label: (\n            <View style={{flex: 1, flexDirection: 'row'}}>\n                <Image style={{width: 60, height: 20, marginRight: 10}} source={{uri: wings}} />\n                <Text>Wings</Text>\n            </View>\n        ),\n        type: 'boolean',\n        get: async () => (await confGet('@wings', 'false')) === 'true',\n        set: (v) => confSet('@wings', v.toString())\n    },\n    // Info section\n    {\n        // These come from webpack.config.cjs\n        label: (\n            <Text\n                style={{\n                    fontSize: 10,\n                    fontStyle: 'italic',\n                    marginTop: 10,\n                    textAlign: 'right',\n                    marginEnd: 20\n                }}\n            >\n                {VERSION}: build {__BUILD_GITHASH__} from {__BUILD_DATE__}\n            </Text>\n        ),\n        type: 'section',\n        elements: []\n    }\n];\n\nexport default function Settings() {\n    // The default styles can be overriden\n    return (\n        <NavigationContainer>\n            <View style={styles.container}>\n                <ReactNativeSettings\n                    styles={{value: {color: 'blue', fontFamily: 'serif'}}}\n                    settings={settings}\n                />\n            </View>\n        </NavigationContainer>\n    );\n}\n"}}]);