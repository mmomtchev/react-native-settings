"use strict";(self.webpackChunk_mmomtchev_react_native_settings=self.webpackChunk_mmomtchev_react_native_settings||[]).push([[928],{7928:(n,e,t)=>{t.r(e),t.d(e,{default:()=>s});const s="import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Dimensions, StyleSheet, View} from 'react-native';\nimport {NavigationContainer} from '@react-navigation/native';\n\n// This example uses react-native async-storage to store the configuration\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport {default as ReactNativeSettings, SettingsElement} from '@mmomtchev/react-native-settings';\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        maxHeight: Dimensions.get('window').height,\n        backgroundColor: '#fff',\n        justifyContent: 'center',\n        padding: '1.5%'\n    }\n});\n\n// You have to define a configuration getter\n// (you are allowed to use async)\nasync function confGet(key: string, def: string): Promise<string> {\n    // I am slow\n    await new Promise((resolve) => setTimeout(resolve, 500));\n    return await AsyncStorage.getItem(key)\n        .then((v) => {\n            if (v === null) throw new Error('value not found');\n            return v;\n        })\n        .catch(() => {\n            return def;\n        });\n}\n\n// And a configuration setter\n// (you are allowed to use async or to return false to deny the operation but not both at the same time)\nfunction confSet(key: string, value: string): Promise<void> | boolean {\n    // denying must be synchronous\n    if (value.startsWith('bad')) return false;\n    // I am slow\n    return new Promise((resolve) => setTimeout(resolve, 500)).then(() =>\n        AsyncStorage.setItem(key, value).catch((e) => {\n            // eslint-disable-next-line no-console\n            console.error(e);\n        })\n    );\n}\n\nconst intelligence: Record<string, string> = {L: 'Low', M: 'Medium', H: 'High'};\nconst pairs: Record<string, string> = {'2': 'Two', '4': 'Four', '6': 'Six', '8': 'Eight'};\n\n// This is the configuration schema\nconst settings: SettingsElement[] = [\n    {\n        // Two items grouped under a common header\n        label: 'Alien Race',\n        type: 'section',\n        elements: [\n            {\n                label: 'Name',\n                type: 'string',\n                display: (s) => (s && s.length ? s : 'empty'),\n                get: confGet.bind(null, '@name', ''),\n                set: confSet.bind(null, '@name')\n            },\n            // You can use `display` to define how information is rendered\n            {\n                label: 'Secret',\n                type: 'string',\n                display: (s) => (s && s.length ? '***' : 'empty'),\n                get: confGet.bind(null, '@password', ''),\n                set: confSet.bind(null, '@password')\n            }\n        ]\n    },\n    // Choose from a list, uses the standard phone navigation screens\n    {\n        label: 'Intelligence',\n        type: 'enum',\n        values: Object.keys(intelligence),\n        display: (v: string) => intelligence[v],\n        get: confGet.bind(null, '@int', 'M'),\n        set: confSet.bind(null, '@int')\n    },\n    {\n        label: 'Legs',\n        type: 'enum',\n        values: Object.keys(pairs),\n        display: (v: string) => pairs[v],\n        get: confGet.bind(null, '@legs', '2'),\n        set: confSet.bind(null, '@legs')\n    },\n    {\n        label: 'Arms',\n        type: 'enum',\n        values: Object.keys(pairs),\n        display: (v: string) => pairs[v],\n        get: confGet.bind(null, '@arms', '2'),\n        set: confSet.bind(null, '@arms')\n    },\n    // Boolean switches grouped under a common header\n    {\n        label: 'Features',\n        type: 'section',\n        elements: [\n            {\n                label: 'Wings',\n                type: 'boolean',\n                get: async () => (await confGet('@wings', 'false')) === 'true',\n                set: (v) => confSet('@wings', v.toString())\n            },\n            {\n                label: 'Horns',\n                type: 'boolean',\n                get: async () => (await confGet('@horns', 'true')) === 'true',\n                set: (v) => confSet('@horns', v.toString())\n            },\n            {\n                label: 'Fangs',\n                type: 'boolean',\n                get: async () => (await confGet('@fangs', 'false')) === 'true',\n                set: (v) => confSet('@fangs', v.toString())\n            },\n            {\n                label: 'Claws',\n                type: 'boolean',\n                get: async () => (await confGet('@claws', 'false')) === 'true',\n                set: (v) => confSet('@claws', v.toString())\n            },\n            {\n                label: 'Gills',\n                type: 'boolean',\n                get: async () => (await confGet('@gills', 'false')) === 'true',\n                set: (v) => confSet('@gills', v.toString())\n            }\n        ]\n    }\n];\n\nexport default function Settings() {\n    // Simply pass the schema here\n    // It integrates in your existing `NavigationContainer` or `Screen`\n    return (\n        <NavigationContainer>\n            <View style={styles.container}>\n                <ReactNativeSettings settings={settings} />\n            </View>\n        </NavigationContainer>\n    );\n}\n\nReactDOM.render(<Settings />, document.getElementById('root'));\n"}}]);